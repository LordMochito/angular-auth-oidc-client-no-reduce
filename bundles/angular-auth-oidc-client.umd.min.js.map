{"version":3,"sources":["ng://angular-auth-oidc-client/lib/models/jwtkeys.ts","ng://angular-auth-oidc-client/lib/models/authorization-result.ts","ng://angular-auth-oidc-client/lib/models/authorization-state.enum.ts","ng://angular-auth-oidc-client/lib/models/validation-result.enum.ts","ng://angular-auth-oidc-client/lib/models/validate-state-result.model.ts","ng://angular-auth-oidc-client/lib/data-services/oidc-data.service.ts","../../node_modules/tslib/tslib.es6.js","ng://angular-auth-oidc-client/lib/services/platform.provider.ts","ng://angular-auth-oidc-client/lib/services/auth-configuration.provider.ts","ng://angular-auth-oidc-client/lib/services/oidc.logger.service.ts","ng://angular-auth-oidc-client/lib/services/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-equality-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.storage.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.common.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.validation.ts","ng://angular-auth-oidc-client/lib/services/oidc-security-state-validation.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.check-session.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.config.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.silent-renew.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.user-service.ts","ng://angular-auth-oidc-client/lib/services/uri-encoder.ts","ng://angular-auth-oidc-client/lib/services/url-parser.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/modules/auth.module.ts"],"names":["JwtKeys","this","keys","kty","use","kid","x5t","e","n","x5c","AuthorizationResult","authorizationState","validationResult","authorized","forbidden","unauthorized","NotSet","StatesDoNotMatch","SignatureFailed","IncorrectNonce","RequiredPropertyMissing","MaxOffsetExpired","IssDoesNotMatchIssuer","NoAuthWellKnownEndPoints","IncorrectAud","TokenExpired","IncorrectAtHash","Ok","LoginRequired","SecureTokenServerError","ValidateStateResult","access_token","id_token","authResponseIsValid","decoded_id_token","state","ValidationResult","OidcDataService","prototype","getWellknownEndpoints","url","headers","HttpHeaders","set","httpClient","get","getIdentityUserData","token","decodeURIComponent","Injectable","HttpClient","__assign","Object","assign","t","s","i","arguments","length","p","hasOwnProperty","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","ar","push","error","PlatformProvider","defineProperty","isPlatformBrowser","platformId","args","providedIn","decorators","type","Inject","PLATFORM_ID","ConfigurationProvider","mergedOpenIdConfiguration","authWellKnownEndpoints","onConfigurationChangeInternal","asObservable","setup","passedOpenIfConfiguration","passedAuthWellKnownEndpoints","setSpecialCases","currentConfig","platformProvider","isBrowser","start_checksession","silent_renew","use_refresh_token","DEFAULT_CONFIG","stsServer","redirect_url","client_id","response_type","scope","hd_param","post_logout_redirect_uri","silent_renew_url","silent_renew_offset_in_seconds","post_login_route","forbidden_route","unauthorized_route","auto_userinfo","auto_clean_state_after_authentication","trigger_authorization_result_event","log_console_warning_active","log_console_debug_active","iss_validation_off","history_cleanup_off","max_id_token_iat_offset_allowed_in_seconds","isauthorizedrace_timeout_in_seconds","disable_iat_offset_validation","storage","Storage","sessionStorage","INITIAL_AUTHWELLKNOWN","issuer","jwks_uri","authorization_endpoint","token_endpoint","userinfo_endpoint","end_session_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","Subject","LoggerService","logError","message","_i","console","__spread","concat","logWarning","configurationProvider","openIDConfiguration","warn","logDebug","log","IFrameService","getExistingIFrame","identifier","iFrameOnParent","getIFrameFromParentWindow","isIFrameElement","iFrameOnSelf","getIFrameFromWindow","addIFrameToWindowBody","sessionIframe","window","document","createElement","id","loggerService","style","display","body","appendChild","iFrameElement","parent","getElementById","element","HTMLIFrameElement","EqualityHelperService","areEqual","value1","value2","bothValuesAreArrays","arraysEqual","bothValuesAreStrings","bothValuesAreObjects","JSON","stringify","toLowerCase","oneValueIsStringAndTheOtherIsArray","Array","isArray","valueIsString","valueIsObject","String","arr1","arr2","TokenHelperService","getTokenExpirationDate","dataIdToken","Date","date","setUTCSeconds","exp","getHeaderFromToken","encoded","tokenIsValid","getPartOfToken","getPayloadFromToken","getSignatureFromToken","index","partOfToken","extractPartOfToken","result","urlBase64Decode","parse","str","output","replace","Error","decoded","atob","Buffer","toString","split","map","c","charCodeAt","slice","join","err","includes","PARTS_OF_TOKEN","OidcSecurityStorage","BrowserStorage","read","key","hasStorage","configProvider","getItem","write","undefined","setItem","OidcSecurityCommon","retrieve","storage_auth_result","store","storage_access_token","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_code_verifier","storage_auth_state_control","storage_session_state","storage_silent_renew_running","storage_custom_request_params","oidcSecurityStorage","resetStorageData","isRenewProcess","getAccessToken","getIdToken","getRefreshToken","authResult","refresh_token","OidcSecurityValidation","isTokenExpired","offsetSeconds","tokenHelperService","validate_id_token_exp_not_expired","tokenExpirationDate","tokenExpirationValue","valueOf","nowWithOffset","tokenNotExpired","validate_required_id_token","validated","validate_id_token_iat_max_offset","max_offset_allowed_in_seconds","dateTime_iat_id_token","iat","validate_id_token_nonce","local_nonce","nonce","RefreshTokenNoncePlaceholder","validate_id_token_iss","authWellKnownEndpoints_issuer","iss","validate_id_token_aud","aud","arrayHelperService","validateStateFromHashCallback","local_state","validate_userdata_sub_id_token","id_token_sub","userdata_sub","validate_signature_id_token","jwtkeys","header_data","constructor","alg","isValid","_h","tslib_1.__values","_j","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_d","_e","_f","_g","config_validate_response_type","validate_id_token_at_hash","at_hash","isCodeFlow","testdata","generate_at_hash","testValue","hash","crypto","Util","hashString","first128bits","substr","hextob64u","generate_code_verifier","code_challenge","StateValidationService","validateState","jwtKeys","toReturn","oidcSecurityValidation","oidcSecurityCommon","authStateControl","handleUnsuccessfulValidation","authNonce","wellKnownEndpoints","handleSuccessfulValidation","IFRAME_FOR_CHECK_SESSION_IDENTIFIER","OidcSecurityCheckSession","_onCheckSessionChanged","doesSessionExist","existingIFrame","iFrameService","init","_this","lastIFrameRefresh","iframeRefreshInterval","now","from","iframeMessageEvent","messageHandler","bind","addEventListener","contentWindow","location","Observable","create","observer","onload","complete","startCheckingSession","clientId","scheduledHeartBeat","pollServerSession","stopCheckingSession","clearScheduledHeartBeat","_pollServerSessionRecur","pipe","take","subscribe","session_state","sessionState","outstandingMessages","postMessage","setTimeout","heartBeatInterval","zone","runOutsideAngular","clearTimeout","origin","source","data","NgZone","OidcConfigService","configurationLoadedInternal","load","configUrl","switchMap","clientConfiguration","loadUsingConfiguration","catchError","of","toPromise","load_using_stsServer","load_using_custom_stsServer","authWellknownEndpoints","customConfig","clientConfig","ReplaySubject","IFRAME_FOR_SILENT_RENEW_IDENTIFIER","OidcSecuritySilentRenew","initRenew","startRenew","onLoadHandler","removeEventListener","src","OidcSecurityUserService","initUserData","userData","getUserData","setUserData","oidcDataService","UriEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","UrlParserService","getUrlParameter","urlToCheck","name","results","RegExp","exec","OidcSecurityService","_onModuleSetup","_onAuthorizationResult","onConfigurationChange","setupModule","openIdConfiguration","oidcSecurityCheckSession","onCheckSessionChanged","checkSessionChanged","isAuthorized","idToken","accessToken","setIsAuthorized","runTokenValidation","oidcSecuritySilentRenew","boundSilentRenewEvent","silentRenewEventHandler","instanceId_1","Math","random","boundSilentRenewInitEvent_1","detail","dispatchEvent","CustomEvent","_userData","getIsModuleSetup","_isModuleSetup","getIsAuthorized","_isSetupAndAuthorized","getToken","_isAuthorized","getValue","getPayloadFromIdToken","encode","setState","getState","setCustomRequestParameters","params","customRequestParams","authorize","urlHandler","authWellKnownEndpointsLoaded","resetAuthorizationData","code_verifier","createAuthorizeUrl","redirectTo","authorizedCallbackWithCode","authorizedCallbackWithCode$","code","urlParserService","requestTokensWithCode$","requestTokensWithCode","filter","isModuleSetup","requestTokensWithCodeProcedure$","refreshTokensWithCodeProcedure","tokenRequestUrl","post","response","obj","authorizedCodeFlowCallbackProcedure","requestTokensWithCodeProcedure","throwError","silentRenewRunning","authorizedCallbackProcedure","authorizedImplicitFlowCallbackProcedure","reduce","resultData","item","parts","shift","authorizedImplicitFlowCallback","href","history","replaceState","title","pathname","AuthorizationState","router","navigate","getSigningKeys","getValidatedStateResult","setAuthorizationData","getUserinfo","oidcSecurityUserService","sub","logoff","id_token_hint","createEndSessionUrl","refreshSession","handleError","status","silentRenew","startCheckingSilentRenew","stopCheckingSilentRenew","_scheduledHeartBeat","runTokenValidationRunning","getEndSessionUrl","stateValidationService","prompt","urlParts","authorizationUrl","HttpParams","fromString","encoder","append","customParams","forEach","authorizationEndsessionUrl","handleErrorGetSigningKeys","errMsg","Response","json","statusText","silentRenewHeartBeatCheck","Router","moduleSetup","BehaviorSubject","onModuleSetup","race$","tap","race","timer","switchMapTo","shareReplay","isSetupAndAuthorized","AuthModule","forRoot","ngModule","providers","provide","useClass","NgModule"],"mappings":"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","sourcesContent":["export class JwtKeys {\r\n    keys: JwtKey[] = [];\r\n}\r\n\r\nexport class JwtKey {\r\n    kty = '';\r\n    use = '';\r\n    kid = '';\r\n    x5t = '';\r\n    e = '';\r\n    n = '';\r\n    x5c: any[] = [];\r\n}\r\n","import { AuthorizationState } from './authorization-state.enum';\r\nimport { ValidationResult } from './validation-result.enum';\r\n\r\nexport class AuthorizationResult {\r\n    constructor(\r\n        public authorizationState: AuthorizationState,\r\n        public validationResult: ValidationResult\r\n    ) {}\r\n}\r\n","export enum AuthorizationState {\r\n    authorized = 'authorized',\r\n    forbidden = 'forbidden',\r\n    unauthorized = 'unauthorized'\r\n}\r\n","export enum ValidationResult {\r\n    NotSet = 'NotSet',\r\n    StatesDoNotMatch = 'StatesDoNotMatch',\r\n    SignatureFailed = 'SignatureFailed',\r\n    IncorrectNonce = 'IncorrectNonce',\r\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\r\n    MaxOffsetExpired = 'MaxOffsetExpired',\r\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\r\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\r\n    IncorrectAud = 'IncorrectAud',\r\n    TokenExpired = 'TokenExpired',\r\n    IncorrectAtHash = 'IncorrectAtHash',\r\n    Ok = 'Ok',\r\n    LoginRequired = 'LoginRequired',\r\n    SecureTokenServerError = 'SecureTokenServerError'\r\n}\r\n","import { ValidationResult } from './validation-result.enum';\r\n\r\nexport class ValidateStateResult {\r\n    constructor(\r\n        public access_token = '',\r\n        public id_token = '',\r\n        public authResponseIsValid = false,\r\n        public decoded_id_token: any = {},\r\n        public state: ValidationResult = ValidationResult.NotSet\r\n    ) {}\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class OidcDataService {\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n    getWellknownEndpoints<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers: headers,\r\n        });\r\n    }\r\n\r\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers: headers,\r\n        });\r\n    }\r\n\r\n    get<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers: headers,\r\n        });\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PlatformProvider {\r\n    get isBrowser() {\r\n        return isPlatformBrowser(this.platformId);\r\n    }\r\n\r\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { OpenIdConfiguration, OpenIdInternalConfiguration } from '../models/auth.configuration';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { PlatformProvider } from './platform.provider';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationProvider {\r\n    private DEFAULT_CONFIG: OpenIdInternalConfiguration = {\r\n        stsServer: 'https://please_set',\r\n        redirect_url: 'https://please_set',\r\n        client_id: 'please_set',\r\n        response_type: 'code',\r\n        scope: 'openid email profile',\r\n        hd_param: '',\r\n        post_logout_redirect_uri: 'https://please_set',\r\n        start_checksession: false,\r\n        silent_renew: false,\r\n        silent_renew_url: 'https://please_set',\r\n        silent_renew_offset_in_seconds: 0,\r\n        use_refresh_token: false,\r\n        post_login_route: '/',\r\n        forbidden_route: '/forbidden',\r\n        unauthorized_route: '/unauthorized',\r\n        auto_userinfo: true,\r\n        auto_clean_state_after_authentication: true,\r\n        trigger_authorization_result_event: false,\r\n        log_console_warning_active: true,\r\n        log_console_debug_active: false,\r\n        iss_validation_off: false,\r\n        history_cleanup_off: false,\r\n        max_id_token_iat_offset_allowed_in_seconds: 3,\r\n        isauthorizedrace_timeout_in_seconds: 5,\r\n        disable_iat_offset_validation: false,\r\n        storage: typeof Storage !== 'undefined' ? sessionStorage : null,\r\n    };\r\n\r\n    private INITIAL_AUTHWELLKNOWN: AuthWellKnownEndpoints = {\r\n        issuer: '',\r\n        jwks_uri: '',\r\n        authorization_endpoint: '',\r\n        token_endpoint: '',\r\n        userinfo_endpoint: '',\r\n        end_session_endpoint: '',\r\n        check_session_iframe: '',\r\n        revocation_endpoint: '',\r\n        introspection_endpoint: '',\r\n    };\r\n\r\n    private mergedOpenIdConfiguration: OpenIdInternalConfiguration = this.DEFAULT_CONFIG;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints = this.INITIAL_AUTHWELLKNOWN;\r\n\r\n    private onConfigurationChangeInternal = new Subject<OpenIdConfiguration>();\r\n\r\n    get openIDConfiguration(): OpenIdInternalConfiguration {\r\n        return this.mergedOpenIdConfiguration;\r\n    }\r\n\r\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\r\n        return this.authWellKnownEndpoints;\r\n    }\r\n\r\n    get onConfigurationChange() {\r\n        return this.onConfigurationChangeInternal.asObservable();\r\n    }\r\n\r\n    constructor(private platformProvider: PlatformProvider) {}\r\n\r\n    setup(\r\n        passedOpenIfConfiguration: OpenIdConfiguration | null | undefined,\r\n        passedAuthWellKnownEndpoints: AuthWellKnownEndpoints | null | undefined\r\n    ) {\r\n        this.mergedOpenIdConfiguration = { ...this.mergedOpenIdConfiguration, ...passedOpenIfConfiguration };\r\n        this.setSpecialCases(this.mergedOpenIdConfiguration);\r\n        this.authWellKnownEndpoints = { ...passedAuthWellKnownEndpoints };\r\n        this.onConfigurationChangeInternal.next({ ...this.mergedOpenIdConfiguration });\r\n    }\r\n\r\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\r\n        if (!this.platformProvider.isBrowser) {\r\n            currentConfig.start_checksession = false;\r\n            currentConfig.silent_renew = false;\r\n            currentConfig.use_refresh_token = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n    constructor(private configurationProvider: ConfigurationProvider) {}\r\n\r\n    logError(message: any, ...args: any[]) {\r\n        console.error(message, ...args);\r\n    }\r\n\r\n    logWarning(message: any) {\r\n        if (this.configurationProvider.openIDConfiguration.log_console_warning_active) {\r\n            console.warn(message);\r\n        }\r\n    }\r\n\r\n    logDebug(message: any) {\r\n        if (this.configurationProvider.openIDConfiguration.log_console_debug_active) {\r\n            console.log(message);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class IFrameService {\r\n    constructor(private loggerService: LoggerService) {}\r\n\r\n    getExistingIFrame(identifier: string): HTMLIFrameElement | null {\r\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\r\n        if (this.isIFrameElement(iFrameOnParent)) {\r\n            return iFrameOnParent;\r\n        }\r\n        const iFrameOnSelf = this.getIFrameFromWindow(identifier);\r\n        if (this.isIFrameElement(iFrameOnSelf)) {\r\n            return iFrameOnSelf;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\r\n        const sessionIframe = window.document.createElement('iframe');\r\n        sessionIframe.id = identifier;\r\n        this.loggerService.logDebug(sessionIframe);\r\n        sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(sessionIframe);\r\n        return sessionIframe;\r\n    }\r\n\r\n    private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\r\n        try {\r\n            const iFrameElement = window.parent.document.getElementById(identifier);\r\n            if (this.isIFrameElement(iFrameElement)) {\r\n                return iFrameElement;\r\n            }\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\r\n        const iFrameElement = window.document.getElementById(identifier);\r\n        if (this.isIFrameElement(iFrameElement)) {\r\n            return iFrameElement;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\r\n        return !!element && element instanceof HTMLIFrameElement;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class EqualityHelperService {\r\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\r\n        if (!value1 || !value2) {\r\n            return false;\r\n        }\r\n\r\n        if (this.bothValuesAreArrays(value1, value2)) {\r\n            return this.arraysEqual(value1 as any[], value2 as any[]);\r\n        }\r\n\r\n        if (this.bothValuesAreStrings(value1, value2)) {\r\n            return value1 === value2;\r\n        }\r\n\r\n        if (this.bothValuesAreObjects(value1, value2)) {\r\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\r\n        }\r\n\r\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\r\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\r\n                return value1[0] === value2;\r\n            }\r\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\r\n                return value2[0] === value1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\r\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\r\n    }\r\n\r\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\r\n    }\r\n\r\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsString(value1) && this.valueIsString(value2);\r\n    }\r\n\r\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\r\n        return Array.isArray(value1) && Array.isArray(value2);\r\n    }\r\n\r\n    private valueIsString(value: any) {\r\n        return typeof value === 'string' || value instanceof String;\r\n    }\r\n\r\n    private valueIsObject(value: any) {\r\n        return typeof value === 'object';\r\n    }\r\n\r\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\r\n        if (arr1.length !== arr2.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = arr1.length; i--; ) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class TokenHelperService {\r\n    private PARTS_OF_TOKEN = 3;\r\n    constructor(private readonly loggerService: LoggerService) { }\r\n\r\n    getTokenExpirationDate(dataIdToken: any): Date {\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            return new Date();\r\n        }\r\n\r\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        date.setUTCSeconds(dataIdToken.exp);\r\n\r\n        return date;\r\n    }\r\n\r\n    getHeaderFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 0, encoded);\r\n    }\r\n\r\n    getPayloadFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 1, encoded);\r\n    }\r\n\r\n    getSignatureFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 2, encoded);\r\n    }\r\n\r\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\r\n        const partOfToken = this.extractPartOfToken(token, index);\r\n\r\n        if (encoded) {\r\n            return partOfToken;\r\n        }\r\n\r\n        const result = this.urlBase64Decode(partOfToken);\r\n        return JSON.parse(result);\r\n    }\r\n\r\n    private urlBase64Decode(str: string) {\r\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                throw Error('Illegal base64url string!');\r\n        }\r\n\r\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : new Buffer(output, 'base64').toString('binary');\r\n\r\n        try {\r\n            // Going backwards: from bytestream, to percent-encoding, to original string.\r\n            return decodeURIComponent(decoded.split('')\r\n                .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n                .join(''));\r\n        } catch (err) {\r\n            return decoded;\r\n        }\r\n    }\r\n\r\n    private tokenIsValid(token: string) {\r\n        if (!token) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\r\n            return false;\r\n        }\r\n\r\n        if (!(token as string).includes('.')) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\r\n            return false;\r\n        }\r\n\r\n        const parts = token.split('.');\r\n\r\n        if (parts.length !== this.PARTS_OF_TOKEN) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${this.PARTS_OF_TOKEN} dots`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private extractPartOfToken(token: string, index: number) {\r\n        return token.split('.')[index];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\n\r\n/**\r\n * Implement this class-interface to create a custom storage.\r\n */\r\n@Injectable()\r\nexport abstract class OidcSecurityStorage {\r\n    /**\r\n     * This method must contain the logic to read the storage.\r\n     * @param key\r\n     * @return The value of the given key\r\n     */\r\n    public abstract read(key: string): any;\r\n\r\n    /**\r\n     * This method must contain the logic to write the storage.\r\n     * @param key\r\n     * @param value The value for the given key\r\n     */\r\n    public abstract write(key: string, value: any): void;\r\n}\r\n\r\n@Injectable()\r\nexport class BrowserStorage implements OidcSecurityStorage {\r\n    private hasStorage: boolean;\r\n\r\n    constructor(private configProvider: ConfigurationProvider) {\r\n        this.hasStorage = typeof Storage !== 'undefined';\r\n    }\r\n\r\n    public read(key: string): any {\r\n        if (this.hasStorage) {\r\n            return JSON.parse(this.configProvider.openIDConfiguration.storage.getItem(key + '_' + this.configProvider.openIDConfiguration.client_id));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public write(key: string, value: any): void {\r\n        if (this.hasStorage) {\r\n            value = value === undefined ? null : value;\r\n            this.configProvider.openIDConfiguration.storage.setItem(\r\n                key + '_' + this.configProvider.openIDConfiguration.client_id,\r\n                JSON.stringify(value)\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\r\n\r\n@Injectable()\r\nexport class OidcSecurityCommon {\r\n    private storage_auth_result = 'authorizationResult';\r\n\r\n    public get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\r\n\r\n    public set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\r\n\r\n    private storage_access_token = 'authorizationData';\r\n\r\n    public get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\r\n\r\n    public set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\r\n\r\n    private storage_id_token = 'authorizationDataIdToken';\r\n\r\n    public get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\r\n\r\n    public set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\r\n\r\n    private storage_is_authorized = '_isAuthorized';\r\n\r\n    public get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\r\n\r\n    public set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\r\n\r\n    private storage_user_data = 'userData';\r\n\r\n    public get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\r\n\r\n    public set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\r\n\r\n    private storage_auth_nonce = 'authNonce';\r\n\r\n    public get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\r\n\r\n    public set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\r\n\r\n    private storage_code_verifier = 'code_verifier';\r\n\r\n    public get code_verifier(): string {\r\n        return this.retrieve(this.storage_code_verifier) || '';\r\n    }\r\n\r\n    public set code_verifier(value: string) {\r\n        this.store(this.storage_code_verifier, value);\r\n    }\r\n\r\n    private storage_auth_state_control = 'authStateControl';\r\n\r\n    public get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\r\n\r\n    public set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\r\n\r\n    private storage_session_state = 'session_state';\r\n\r\n    public get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\r\n\r\n    public set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\r\n\r\n    private storage_silent_renew_running = 'storage_silent_renew_running';\r\n\r\n    public get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\r\n\r\n    public set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\r\n\r\n    private storage_custom_request_params = 'storage_custom_request_params';\r\n\r\n    public get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\r\n\r\n    public set customRequestParams(value: { [key: string]: string | number | boolean }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\r\n\r\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) { }\r\n\r\n    private retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\r\n\r\n    private store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\r\n\r\n    resetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n            this.store(this.storage_code_verifier, '');\r\n        }\r\n    }\r\n\r\n    getAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\r\n\r\n    getIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\r\n\r\n    getRefreshToken(): any {\r\n        return this.authResult.refresh_token;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign';\r\nimport { EqualityHelperService } from './oidc-equality-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\r\n\r\n@Injectable()\r\nexport class OidcSecurityValidation {\r\n\r\n    static RefreshTokenNoncePlaceholder = '--RefreshToken--';\r\n\r\n    constructor(\r\n        private arrayHelperService: EqualityHelperService,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\r\n    validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\r\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\r\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\r\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\r\n\r\n        this.loggerService.logDebug(`Token not expired?: ${tokenExpirationValue} > ${nowWithOffset}  (${tokenNotExpired})`);\r\n\r\n        // Token not expired?\r\n        return tokenNotExpired;\r\n    }\r\n\r\n    // iss\r\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\r\n    // and optionally, port number and path components and no query or fragment components.\r\n    //\r\n    // sub\r\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n    //\r\n    // aud\r\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\r\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n    //\r\n    // exp\r\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\r\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n    //\r\n    // iat\r\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\r\n    // in UTC until the date/ time.\r\n    validate_required_id_token(dataIdToken: any): boolean {\r\n        let validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    validate_id_token_iat_max_offset(dataIdToken: any,\r\n                                     max_offset_allowed_in_seconds: number,\r\n                                     disable_iat_offset_validation: boolean): boolean {\r\n\r\n        if (disable_iat_offset_validation) {\r\n            return true;\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' +\r\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\r\n                ' < ' +\r\n                max_offset_allowed_in_seconds * 1000\r\n        );\r\n        return new Date().valueOf() - dateTime_iat_id_token.valueOf() < max_offset_allowed_in_seconds * 1000;\r\n    }\r\n\r\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n    // The precise method for detecting replay attacks is Client specific.\r\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        const isFromRefreshToken = dataIdToken.nonce === undefined && local_nonce === OidcSecurityValidation.RefreshTokenNoncePlaceholder;\r\n        if (!isFromRefreshToken && dataIdToken.nonce !== local_nonce) {\r\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + local_nonce);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n    // MUST exactly match the value of the iss (issuer) Claim.\r\n    validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\r\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpoints_issuer as string)) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n    // not trusted by the Client.\r\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if ((state as string) !== (local_state as string)) {\r\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + local_state);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate_userdata_sub_id_token(id_token_sub: any, userdata_sub: any): boolean {\r\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\r\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + id_token_sub + ' userdata_sub:' + userdata_sub);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const header_data = this.tokenHelperService.getHeaderFromToken(id_token, false);\r\n\r\n        if (Object.keys(header_data).length === 0 && header_data.constructor === Object) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const kid = header_data.kid;\r\n        const alg = header_data.alg;\r\n\r\n        if ('RS256' !== (alg as string)) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let amountOfMatchingKeys = 0;\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\r\n                return false;\r\n            } else {\r\n                for (const key of jwtkeys.keys) {\r\n                    if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\r\n                        const publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kid as string) === (kid as string)) {\r\n                    const publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    config_validate_response_type(response_type: string): boolean {\r\n        if (response_type === 'id_token token' || response_type === 'id_token') {\r\n            return true;\r\n        }\r\n\r\n        if (response_type === 'code') {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + response_type);\r\n        return false;\r\n    }\r\n\r\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n    ////    if (!header_data.hasOwnProperty('kid')) {\r\n    ////        // no kid defined in Jose header\r\n    ////        if (jwtkeys.keys.length != 1) {\r\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n    ////            return false;\r\n    ////        }\r\n    ////    }\r\n\r\n    ////    return true;\r\n    //// }\r\n\r\n    // Access Token Validation\r\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n    // is present in the ID Token.\r\n    validate_id_token_at_hash(access_token: any, at_hash: any, isCodeFlow: boolean): boolean {\r\n        this.loggerService.logDebug('at_hash from the server:' + at_hash);\r\n\r\n        // The at_hash is optional for the code flow\r\n        if (isCodeFlow) {\r\n            if (!(at_hash as string)) {\r\n                this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const testdata = this.generate_at_hash('' + access_token);\r\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\r\n        if (testdata === (at_hash as string)) {\r\n            return true; // isValid;\r\n        } else {\r\n            const testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === (at_hash as string)) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private generate_at_hash(access_token: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        const first128bits = hash.substr(0, hash.length / 2);\r\n        const testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\n\r\n    generate_code_verifier(code_challenge: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(code_challenge, 'sha256');\r\n        const testdata = hextob64u(hash);\r\n\r\n        return testdata;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\n\r\n@Injectable()\r\nexport class StateValidationService {\r\n    constructor(\r\n        public oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) { }\r\n\r\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        const toReturn = new ValidateStateResult();\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            toReturn.state = ValidationResult.StatesDoNotMatch;\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        if (\r\n            this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\r\n            this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n        ) {\r\n            toReturn.access_token = result.access_token;\r\n        }\r\n\r\n        if (result.id_token) {\r\n            toReturn.id_token = result.id_token;\r\n\r\n            toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\r\n\r\n            if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\r\n                this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\r\n                toReturn.state = ValidationResult.SignatureFailed;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_id_token_nonce(toReturn.decoded_id_token, this.oidcSecurityCommon.authNonce)) {\r\n                this.loggerService.logWarning('authorizedCallback incorrect nonce');\r\n                toReturn.state = ValidationResult.IncorrectNonce;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\r\n                this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\r\n                toReturn.state = ValidationResult.RequiredPropertyMissing;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (\r\n                !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\r\n                    toReturn.decoded_id_token,\r\n                    this.configurationProvider.openIDConfiguration.max_id_token_iat_offset_allowed_in_seconds,\r\n                    this.configurationProvider.openIDConfiguration.disable_iat_offset_validation\r\n                )\r\n            ) {\r\n                this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\r\n                toReturn.state = ValidationResult.MaxOffsetExpired;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                if (this.configurationProvider.openIDConfiguration.iss_validation_off) {\r\n                    this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\r\n                } else if (\r\n                    !this.configurationProvider.openIDConfiguration.iss_validation_off &&\r\n                    !this.oidcSecurityValidation.validate_id_token_iss(\r\n                        toReturn.decoded_id_token,\r\n                        this.configurationProvider.wellKnownEndpoints.issuer)\r\n                ) {\r\n                    this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\r\n                    toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\r\n                    this.handleUnsuccessfulValidation();\r\n                    return toReturn;\r\n                }\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n                toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_id_token_aud(\r\n                toReturn.decoded_id_token,\r\n                this.configurationProvider.openIDConfiguration.client_id)) {\r\n                this.loggerService.logWarning('authorizedCallback incorrect aud');\r\n                toReturn.state = ValidationResult.IncorrectAud;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\r\n                this.loggerService.logWarning('authorizedCallback token expired');\r\n                toReturn.state = ValidationResult.TokenExpired;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n        } else {\r\n            this.loggerService.logDebug('No id_token found, skipping id_token validation');\r\n        }\r\n\r\n        // flow id_token token\r\n        if (\r\n            this.configurationProvider.openIDConfiguration.response_type !== 'id_token token' &&\r\n            this.configurationProvider.openIDConfiguration.response_type !== 'code'\r\n        ) {\r\n            toReturn.authResponseIsValid = true;\r\n            toReturn.state = ValidationResult.Ok;\r\n            this.handleSuccessfulValidation();\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\r\n                toReturn.access_token,\r\n                toReturn.decoded_id_token.at_hash,\r\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n            ) ||\r\n            !toReturn.access_token\r\n        ) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\r\n            toReturn.state = ValidationResult.IncorrectAtHash;\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        toReturn.authResponseIsValid = true;\r\n        toReturn.state = ValidationResult.Ok;\r\n        this.handleSuccessfulValidation();\r\n        return toReturn;\r\n    }\r\n\r\n    private handleSuccessfulValidation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\r\n    }\r\n\r\n    private handleUnsuccessfulValidation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { from, Observable, Observer, Subject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class OidcSecurityCheckSession {\r\n    private sessionIframe: any;\r\n    private iframeMessageEvent: any;\r\n    private scheduledHeartBeat: any;\r\n    private lastIFrameRefresh = 0;\r\n    private outstandingMessages = 0;\r\n    private heartBeatInterval = 3000;\r\n    private iframeRefreshInterval = 60000;\r\n    private _onCheckSessionChanged = new Subject<any>();\r\n\r\n    public get onCheckSessionChanged(): Observable<any> {\r\n        return this._onCheckSessionChanged.asObservable();\r\n    }\r\n\r\n    constructor(\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private iFrameService: IFrameService,\r\n        private zone: NgZone,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    private doesSessionExist(): boolean {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n\r\n        if (!existingIFrame) {\r\n            return false;\r\n        }\r\n\r\n        this.sessionIframe = existingIFrame;\r\n        return true;\r\n    }\r\n\r\n    private init() {\r\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\r\n            return from([this]);\r\n        }\r\n\r\n        if (!this.doesSessionExist()) {\r\n            this.sessionIframe = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n            this.iframeMessageEvent = this.messageHandler.bind(this);\r\n            window.addEventListener('message', this.iframeMessageEvent, false);\r\n        }\r\n\r\n        if (!this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\r\n            return;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints.check_session_iframe) {\r\n            this.sessionIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.check_session_iframe);\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return Observable.create((observer: Observer<OidcSecurityCheckSession>) => {\r\n            this.sessionIframe.onload = () => {\r\n                this.lastIFrameRefresh = Date.now();\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n\r\n    startCheckingSession(clientId: string): void {\r\n        if (this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.pollServerSession(clientId);\r\n    }\r\n\r\n    stopCheckingSession(): void {\r\n        if (!this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.clearScheduledHeartBeat();\r\n    }\r\n\r\n    private pollServerSession(clientId: string) {\r\n        const _pollServerSessionRecur = () => {\r\n            this.init()\r\n                .pipe(take(1))\r\n                .subscribe(() => {\r\n                    if (this.sessionIframe && clientId) {\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        const session_state = this.oidcSecurityCommon.sessionState;\r\n                        if (session_state) {\r\n                            this.outstandingMessages++;\r\n                            this.sessionIframe.contentWindow.postMessage(\r\n                                clientId + ' ' + session_state,\r\n                                this.configurationProvider.openIDConfiguration.stsServer\r\n                            );\r\n                        } else {\r\n                            this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\r\n                            this._onCheckSessionChanged.next();\r\n                        }\r\n                    } else {\r\n                        this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\r\n                        this.loggerService.logDebug(clientId);\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        // this.init();\r\n                    }\r\n\r\n                    // after sending three messages with no response, fail.\r\n                    if (this.outstandingMessages > 3) {\r\n                        this.loggerService.logError(\r\n                            `OidcSecurityCheckSession not receiving check session response messages. Outstanding messages: ${\r\n                                this.outstandingMessages\r\n                            }. Server unreachable?`\r\n                        );\r\n                        this._onCheckSessionChanged.next();\r\n                    }\r\n\r\n                    this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\r\n                });\r\n        };\r\n\r\n        this.outstandingMessages = 0;\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\r\n        });\r\n    }\r\n    private clearScheduledHeartBeat() {\r\n        clearTimeout(this.scheduledHeartBeat);\r\n        this.scheduledHeartBeat = null;\r\n    }\r\n\r\n    private messageHandler(e: any) {\r\n        this.outstandingMessages = 0;\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.configurationProvider.openIDConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning('error from checksession messageHandler');\r\n            } else if (e.data === 'changed') {\r\n                this._onCheckSessionChanged.next();\r\n            } else {\r\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, ReplaySubject } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\nexport interface ConfigResult {\r\n    authWellknownEndpoints: any;\r\n    customConfig: any;\r\n}\r\n\r\n@Injectable()\r\nexport class OidcConfigService {\r\n    private configurationLoadedInternal = new ReplaySubject<ConfigResult>(1);\r\n\r\n    public get onConfigurationLoaded(): Observable<ConfigResult> {\r\n        return this.configurationLoadedInternal.asObservable();\r\n    }\r\n\r\n    constructor(private readonly loggerService: LoggerService, private readonly httpClient: HttpClient) { }\r\n\r\n    load(configUrl: string) {\r\n        return this.httpClient\r\n            .get(configUrl)\r\n            .pipe(\r\n                switchMap(clientConfiguration => {\r\n                    return this.loadUsingConfiguration(clientConfiguration);\r\n                }),\r\n                catchError(error => {\r\n                    this.loggerService.logError(`OidcConfigService 'load' threw an error on calling ${configUrl}`, error);\r\n                    this.configurationLoadedInternal.next(undefined);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    load_using_stsServer(stsServer: string) {\r\n        return this.loadUsingConfiguration({ stsServer }).toPromise();\r\n    }\r\n\r\n    load_using_custom_stsServer(url: string) {\r\n        return this.httpClient\r\n            .get(url)\r\n            .pipe(\r\n                switchMap(wellKnownEndpoints => {\r\n                    this.configurationLoadedInternal.next({\r\n                        authWellknownEndpoints: wellKnownEndpoints,\r\n                        customConfig: { stsServer: url },\r\n                    });\r\n                    return of(true);\r\n                }),\r\n                catchError(error => {\r\n                    this.loggerService.logError(`OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${url}`, error);\r\n                    this.configurationLoadedInternal.next(undefined);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    private loadUsingConfiguration(clientConfig: any) {\r\n        if (!clientConfig.stsServer) {\r\n            this.loggerService.logError(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`, clientConfig);\r\n            throw new Error(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`);\r\n        }\r\n\r\n        const url = `${clientConfig.stsServer}/.well-known/openid-configuration`;\r\n\r\n        return this.httpClient.get(url).pipe(\r\n            switchMap(wellKnownEndpoints => {\r\n                this.configurationLoadedInternal.next({\r\n                    authWellknownEndpoints: wellKnownEndpoints,\r\n                    customConfig: clientConfig,\r\n                });\r\n                return of(true);\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(`OidcConfigService 'load_using_stsServer' threw an error on calling ${url}`, error);\r\n                this.configurationLoadedInternal.next(undefined);\r\n                return of(false);\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\r\n\r\n@Injectable()\r\nexport class OidcSecuritySilentRenew {\r\n    constructor(private loggerService: LoggerService, private iFrameService: IFrameService) {}\r\n\r\n    initRenew(): HTMLIFrameElement {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n        if (!existingIFrame) {\r\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n        }\r\n        return existingIFrame;\r\n    }\r\n\r\n    startRenew(url: string): Observable<void> {\r\n        const sessionIframe = this.initRenew();\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        return new Observable<void>(observer => {\r\n            const onLoadHandler = () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n                observer.next(undefined);\r\n                observer.complete();\r\n            };\r\n            sessionIframe.addEventListener('load', onLoadHandler);\r\n            sessionIframe.src = url;\r\n            return () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\n@Injectable()\r\nexport class OidcSecurityUserService {\r\n    private userData: any = '';\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    initUserData() {\r\n        return this.getIdentityUserData().pipe(map((data: any) => (this.userData = data)));\r\n    }\r\n\r\n    getUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\r\n\r\n    setUserData(value: any): void {\r\n        this.userData = value;\r\n    }\r\n\r\n    private getIdentityUserData(): Observable<any> {\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (!this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n\r\n            throw Error('authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        const canGetUserData =\r\n            this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.userinfo_endpoint;\r\n\r\n        if (!canGetUserData) {\r\n            this.loggerService.logError(\r\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\r\n            );\r\n            throw Error('authWellKnownEndpoints.userinfo_endpoint is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.getIdentityUserData(this.configurationProvider.wellKnownEndpoints.userinfo_endpoint || '', token);\r\n    }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n\r\nexport class UriEncoder implements HttpParameterCodec {\r\n    encodeKey(key: string): string {\r\n        return encodeURIComponent(key);\r\n    }\r\n\r\n    encodeValue(value: string): string {\r\n        return encodeURIComponent(value);\r\n    }\r\n\r\n    decodeKey(key: string): string {\r\n        return decodeURIComponent(key);\r\n    }\r\n\r\n    decodeValue(value: string): string {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlParserService {\r\n    getUrlParameter(urlToCheck: any, name: any): string {\r\n        if (!urlToCheck) {\r\n            return '';\r\n        }\r\n\r\n        if (!name) {\r\n            return '';\r\n        }\r\n\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n        const results = regex.exec(urlToCheck);\r\n        return results === null ? '' : decodeURIComponent(results[1]);\r\n    }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, from, Observable, of, Subject, throwError, timer } from 'rxjs';\r\nimport { catchError, filter, map, race, shareReplay, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { OpenIdConfiguration } from '../models/auth.configuration';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { AuthorizationResult } from '../models/authorization-result';\r\nimport { AuthorizationState } from '../models/authorization-state.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { UrlParserService } from './url-parser.service';\r\n\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n    private _onModuleSetup = new Subject<boolean>();\r\n    private _onCheckSessionChanged = new Subject<boolean>();\r\n    private _onAuthorizationResult = new Subject<AuthorizationResult>();\r\n\r\n    public get onModuleSetup(): Observable<boolean> {\r\n        return this._onModuleSetup.asObservable();\r\n    }\r\n\r\n    public get onAuthorizationResult(): Observable<AuthorizationResult> {\r\n        return this._onAuthorizationResult.asObservable();\r\n    }\r\n\r\n    public get onCheckSessionChanged(): Observable<boolean> {\r\n        return this._onCheckSessionChanged.asObservable();\r\n    }\r\n\r\n    public get onConfigurationChange(): Observable<OpenIdConfiguration> {\r\n        return this.configurationProvider.onConfigurationChange;\r\n    }\r\n\r\n    checkSessionChanged = false;\r\n    moduleSetup = false;\r\n\r\n    private _isModuleSetup = new BehaviorSubject<boolean>(false);\r\n\r\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\r\n    private _isSetupAndAuthorized: Observable<boolean>;\r\n\r\n    private _userData = new BehaviorSubject<any>('');\r\n    private authWellKnownEndpointsLoaded = false;\r\n    private runTokenValidationRunning = false;\r\n    private _scheduledHeartBeat: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private stateValidationService: StateValidationService,\r\n        private router: Router,\r\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\r\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\r\n        private oidcSecurityUserService: OidcSecurityUserService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone,\r\n        private readonly httpClient: HttpClient,\r\n        private readonly configurationProvider: ConfigurationProvider,\r\n        private readonly urlParserService: UrlParserService\r\n    ) {\r\n        this.onModuleSetup.pipe(take(1)).subscribe(() => {\r\n            this.moduleSetup = true;\r\n            this._isModuleSetup.next(true);\r\n        });\r\n\r\n        this._isSetupAndAuthorized = this._isModuleSetup.pipe(\r\n            filter((isModuleSetup: boolean) => isModuleSetup),\r\n            switchMap(() => {\r\n                if (!this.configurationProvider.openIDConfiguration.silent_renew) {\r\n                    this.loggerService.logDebug(`IsAuthorizedRace: Silent Renew Not Active. Emitting.`);\r\n                    return from([true]);\r\n                }\r\n\r\n                const race$ = this._isAuthorized.asObservable().pipe(\r\n                    filter((isAuthorized: boolean) => isAuthorized),\r\n                    take(1),\r\n                    tap(() => this.loggerService.logDebug('IsAuthorizedRace: Existing token is still authorized.')),\r\n                    race(\r\n                        this._onAuthorizationResult.pipe(\r\n                            take(1),\r\n                            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Silent Renew Refresh Session Complete')),\r\n                            map(() => true)\r\n                        ),\r\n                        timer(this.configurationProvider.openIDConfiguration.isauthorizedrace_timeout_in_seconds * 1000).pipe(\r\n                            // backup, if nothing happens after X seconds stop waiting and emit (5s Default)\r\n                            tap(() => {\r\n                                this.resetAuthorizationData(false);\r\n                                this.oidcSecurityCommon.authNonce = '';\r\n                                this.loggerService.logWarning('IsAuthorizedRace: Timeout reached. Emitting.');\r\n                            }),\r\n                            map(() => true)\r\n                        )\r\n                    )\r\n                );\r\n\r\n                this.loggerService.logDebug('Silent Renew is active, check if token in storage is active');\r\n                if (this.oidcSecurityCommon.authNonce === '' || this.oidcSecurityCommon.authNonce === undefined) {\r\n                    // login not running, or a second silent renew, user must login first before this will work.\r\n                    this.loggerService.logDebug('Silent Renew or login not running, try to refresh the session');\r\n                    this.refreshSession().subscribe();\r\n                }\r\n\r\n                return race$;\r\n            }),\r\n            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Completed')),\r\n            switchMapTo(this._isAuthorized.asObservable()),\r\n            tap((isAuthorized: boolean) => this.loggerService.logDebug(`getIsAuthorized: ${isAuthorized}`)),\r\n            shareReplay(1)\r\n        );\r\n\r\n        this._isSetupAndAuthorized\r\n            .pipe(filter(() => this.configurationProvider.openIDConfiguration.start_checksession))\r\n            .subscribe(isSetupAndAuthorized => {\r\n                if (isSetupAndAuthorized) {\r\n                    this.oidcSecurityCheckSession.startCheckingSession(this.configurationProvider.openIDConfiguration.client_id);\r\n                } else {\r\n                    this.oidcSecurityCheckSession.stopCheckingSession();\r\n                }\r\n            });\r\n    }\r\n\r\n    setupModule(openIdConfiguration: OpenIdConfiguration, authWellKnownEndpoints: AuthWellKnownEndpoints): void {\r\n        this.configurationProvider.setup(openIdConfiguration, authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this._onCheckSessionChanged.next(this.checkSessionChanged);\r\n        });\r\n\r\n        const userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (\r\n                this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken || this.oidcSecurityCommon.accessToken,\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\r\n                )\r\n            ) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n            }\r\n            this.runTokenValidation();\r\n        }\r\n\r\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\r\n\r\n        this._onModuleSetup.next();\r\n\r\n        if (this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            this.oidcSecuritySilentRenew.initRenew();\r\n\r\n            // Support authorization via DOM events.\r\n            // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n            //      We only ever want the latest setup service to be reacting to this event.\r\n            this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\r\n\r\n            const instanceId = Math.random();\r\n\r\n            const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\r\n                if (e.detail !== instanceId) {\r\n                    window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                    window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n                }\r\n            }).bind(this);\r\n\r\n            window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n            window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n            window.dispatchEvent(\r\n                new CustomEvent('oidc-silent-renew-init', {\r\n                    detail: instanceId,\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserData<T = any>(): Observable<T> {\r\n        return this._userData.asObservable();\r\n    }\r\n\r\n    getIsModuleSetup(): Observable<boolean> {\r\n        return this._isModuleSetup.asObservable();\r\n    }\r\n\r\n    getIsAuthorized(): Observable<boolean> {\r\n        return this._isSetupAndAuthorized;\r\n    }\r\n\r\n    getToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getIdToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getRefreshToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getRefreshToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getPayloadFromIdToken(encode = false): any {\r\n        const token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\r\n\r\n    setState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\r\n\r\n    getState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\r\n\r\n    setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\r\n\r\n    // Code Flow with PCKE or Implicit Flow\r\n    authorize(urlHandler?: (url: string) => any) {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\r\n            return;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.configurationProvider.openIDConfiguration.response_type)) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize Code Flow, no auth data');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n        // Code Flow\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    true,\r\n                    code_challenge,\r\n                    this.configurationProvider.openIDConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else {\r\n            // Implicit Flow\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    false,\r\n                    '',\r\n                    this.configurationProvider.openIDConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        if (urlHandler) {\r\n            urlHandler(url);\r\n        } else {\r\n            this.redirectTo(url);\r\n        }\r\n    }\r\n\r\n    // Code Flow\r\n    authorizedCallbackWithCode(urlToCheck: string) {\r\n        this.authorizedCallbackWithCode$(urlToCheck).subscribe();\r\n    }\r\n    authorizedCallbackWithCode$(urlToCheck: string): Observable<void> {\r\n        const code = this.urlParserService.getUrlParameter(urlToCheck, 'code');\r\n        const state = this.urlParserService.getUrlParameter(urlToCheck, 'state');\r\n        const sessionState = this.urlParserService.getUrlParameter(urlToCheck, 'session_state') || null;\r\n\r\n        if (!state) {\r\n            this.loggerService.logDebug('no state in url');\r\n            return of();\r\n        }\r\n        if (!code) {\r\n            this.loggerService.logDebug('no code in url');\r\n            return of();\r\n        }\r\n        this.loggerService.logDebug('running validation for callback' + urlToCheck);\r\n        return this.requestTokensWithCode$(code, state, sessionState);\r\n    }\r\n\r\n    // Code Flow\r\n    requestTokensWithCode(code: string, state: string, sessionState: string | null): void {\r\n        this.requestTokensWithCode$(code, state, sessionState).subscribe();\r\n    }\r\n\r\n    requestTokensWithCode$(code: string, state: string, sessionState: string | null): Observable<void> {\r\n        return this._isModuleSetup.pipe(\r\n            filter(isModuleSetup => !!isModuleSetup),\r\n            take(1),\r\n            switchMap(() => {\r\n                return this.requestTokensWithCodeProcedure$(code, state, sessionState);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Refresh Token\r\n    refreshTokensWithCodeProcedure(code: string, state: string): Observable<any> {\r\n        let tokenRequestUrl = '';\r\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\r\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\r\n        }\r\n\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        const data = `grant_type=refresh_token&client_id=${this.configurationProvider.openIDConfiguration.client_id}` + `&refresh_token=${code}`;\r\n\r\n        return this.httpClient.post(tokenRequestUrl, data, { headers }).pipe(\r\n            map(response => {\r\n                this.loggerService.logDebug('token refresh response: ' + JSON.stringify(response));\r\n                let obj: any = new Object();\r\n                obj = response;\r\n                obj.state = state;\r\n\r\n                this.authorizedCodeFlowCallbackProcedure(obj);\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(error);\r\n                this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\r\n                return of(false);\r\n            })\r\n        );\r\n    }\r\n\r\n    requestTokensWithCodeProcedure(code: string, state: string, session_state: string | null): void {\r\n        this.requestTokensWithCodeProcedure$(code, state, session_state).subscribe();\r\n    }\r\n\r\n    // Code Flow with PCKE\r\n    requestTokensWithCodeProcedure$(code: string, state: string, session_state: string | null): Observable<void> {\r\n        let tokenRequestUrl = '';\r\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\r\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            // ValidationResult.StatesDoNotMatch;\r\n            return throwError(new Error('incorrect state'));\r\n        }\r\n\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        let data =\r\n            `grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}` +\r\n            `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${this.configurationProvider.openIDConfiguration.redirect_url}`;\r\n        if (this.oidcSecurityCommon.silentRenewRunning === 'running') {\r\n            data =\r\n                `grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}` +\r\n                `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${this.configurationProvider.openIDConfiguration.silent_renew_url}`;\r\n        }\r\n\r\n        return this.httpClient.post(tokenRequestUrl, data, { headers: headers }).pipe(\r\n            map(response => {\r\n                let obj: any = new Object();\r\n                obj = response;\r\n                obj.state = state;\r\n                obj.session_state = session_state;\r\n\r\n                this.authorizedCodeFlowCallbackProcedure(obj);\r\n\r\n                return undefined;\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(error);\r\n                this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Code Flow\r\n    private authorizedCodeFlowCallbackProcedure(result: any) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedImplicitFlowCallbackProcedure(hash?: string) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const result: any = hash.split('&').reduce(function(resultData: any, item: string) {\r\n            const parts = item.split('=');\r\n            resultData[<string>parts.shift()] = parts.join('=');\r\n            return resultData;\r\n        }, {});\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    authorizedImplicitFlowCallback(hash?: string) {\r\n        this._isModuleSetup\r\n            .pipe(\r\n                filter((isModuleSetup: boolean) => isModuleSetup),\r\n                take(1)\r\n            )\r\n            .subscribe(() => {\r\n                this.authorizedImplicitFlowCallbackProcedure(hash);\r\n            });\r\n    }\r\n\r\n    private redirectTo(url: string) {\r\n        window.location.href = url;\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedCallbackProcedure(result: any, isRenewProcess: boolean) {\r\n        this.oidcSecurityCommon.authResult = result;\r\n\r\n        if (!this.configurationProvider.openIDConfiguration.history_cleanup_off && !isRenewProcess) {\r\n            // reset the history to remove the tokens\r\n            window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\r\n        } else {\r\n            this.loggerService.logDebug('history clean up inactive');\r\n        }\r\n\r\n        if (result.error) {\r\n            if (isRenewProcess) {\r\n                this.loggerService.logDebug(result);\r\n            } else {\r\n                this.loggerService.logWarning(result);\r\n            }\r\n\r\n            if ((result.error as string) === 'login_required') {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired));\r\n            } else {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.SecureTokenServerError));\r\n            }\r\n\r\n            this.resetAuthorizationData(false);\r\n            this.oidcSecurityCommon.authNonce = '';\r\n\r\n            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n            }\r\n        } else {\r\n            this.loggerService.logDebug(result);\r\n\r\n            this.loggerService.logDebug('authorizedCallback created, begin token validation');\r\n\r\n            this.getSigningKeys().subscribe(\r\n                jwtKeys => {\r\n                    const validationResult = this.getValidatedStateResult(result, jwtKeys);\r\n\r\n                    if (validationResult.authResponseIsValid) {\r\n                        this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\r\n                            this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(\r\n                                response => {\r\n                                    if (response) {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.authorized, validationResult.state)\r\n                                        );\r\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\r\n                                        }\r\n                                    } else {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state)\r\n                                        );\r\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n                                        }\r\n                                    }\r\n                                },\r\n                                err => {\r\n                                    /* Something went wrong while getting signing key */\r\n                                    this.loggerService.logWarning('Failed to retreive user info with error: ' + JSON.stringify(err));\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (!isRenewProcess) {\r\n                                // userData is set to the id_token decoded, auto get user data set to false\r\n                                this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\r\n                                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n                            }\r\n\r\n                            this.runTokenValidation();\r\n\r\n                            this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.authorized, validationResult.state));\r\n                            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // something went wrong\r\n                        this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\r\n                        this.loggerService.logWarning(window.location.hash);\r\n                        this.resetAuthorizationData(false);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state));\r\n                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n                        }\r\n                    }\r\n                },\r\n                err => {\r\n                    /* Something went wrong while getting signing key */\r\n                    this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\r\n                    this.oidcSecurityCommon.silentRenewRunning = '';\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (\r\n                this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\r\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n            ) {\r\n                if (isRenewProcess && this._userData.value) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService.initUserData().subscribe(() => {\r\n                        this.loggerService.logDebug('authorizedCallback (id_token token || code) flow');\r\n\r\n                        const userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                        if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\r\n                            this.setUserData(userData);\r\n                            this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n                            this.loggerService.logDebug(this.oidcSecurityUserService.getUserData());\r\n\r\n                            this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                            this.runTokenValidation();\r\n                            observer.next(true);\r\n                        } else {\r\n                            // something went wrong, userdata sub does not match that from id_token\r\n                            this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\r\n                            this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n                            this.resetAuthorizationData(false);\r\n                            observer.next(false);\r\n                        }\r\n                        observer.complete();\r\n                    });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                this.runTokenValidation();\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n    logoff(urlHandler?: (url: string) => any) {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                const url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n\r\n                this.resetAuthorizationData(false);\r\n\r\n                if (this.configurationProvider.openIDConfiguration.start_checksession && this.checkSessionChanged) {\r\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\r\n                } else if (urlHandler) {\r\n                    urlHandler(url);\r\n                } else {\r\n                    this.redirectTo(url);\r\n                }\r\n            } else {\r\n                this.resetAuthorizationData(false);\r\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    refreshSession(): Observable<boolean> {\r\n        if (!this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            return of(false);\r\n        }\r\n\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n\r\n        // Code Flow\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            if (this.configurationProvider.openIDConfiguration.use_refresh_token) {\r\n                // try using refresh token\r\n                const refresh_token = this.oidcSecurityCommon.getRefreshToken();\r\n                if (refresh_token) {\r\n                    this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\r\n                    // Nonce is not used with refresh tokens\r\n                    this.oidcSecurityCommon.authNonce = OidcSecurityValidation.RefreshTokenNoncePlaceholder;\r\n                    return this.refreshTokensWithCodeProcedure(refresh_token, state);\r\n                } else {\r\n                    this.loggerService.logDebug('no refresh token found, using silent renew');\r\n                }\r\n            }\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    true,\r\n                    code_challenge,\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else {\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    false,\r\n                    '',\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        return this.oidcSecuritySilentRenew.startRenew(url).pipe(map(() => true));\r\n    }\r\n\r\n    handleError(error: any) {\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\r\n            } else {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenew);\r\n\r\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\r\n            } else {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n            }\r\n        }\r\n    }\r\n\r\n    startCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\r\n\r\n    stopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\r\n\r\n    resetAuthorizationData(isRenewProcess: boolean): void {\r\n        if (!isRenewProcess) {\r\n            if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n            this.setIsAuthorized(false);\r\n        }\r\n    }\r\n\r\n    getEndSessionUrl(): string | undefined {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                return this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getValidatedStateResult(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\r\n\r\n    private setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\r\n\r\n    private setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\r\n\r\n    private setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        isCodeFlow: boolean,\r\n        code_challenge: string,\r\n        redirect_url: string,\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const urlParts = authorization_endpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('client_id', this.configurationProvider.openIDConfiguration.client_id);\r\n        params = params.append('redirect_uri', redirect_url);\r\n        params = params.append('response_type', this.configurationProvider.openIDConfiguration.response_type);\r\n        params = params.append('scope', this.configurationProvider.openIDConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (isCodeFlow) {\r\n            params = params.append('code_challenge', code_challenge);\r\n            params = params.append('code_challenge_method', 'S256');\r\n        }\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.configurationProvider.openIDConfiguration.hd_param) {\r\n            params = params.append('hd', this.configurationProvider.openIDConfiguration.hd_param);\r\n        }\r\n\r\n        const customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\r\n        const urlParts = end_session_endpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append('post_logout_redirect_uri', this.configurationProvider.openIDConfiguration.post_logout_redirect_uri);\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    private getSigningKeys(): Observable<JwtKeys> {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logDebug('jwks_uri: ' + this.configurationProvider.wellKnownEndpoints.jwks_uri);\r\n\r\n            return this.oidcDataService\r\n                .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwks_uri || '')\r\n                .pipe(catchError(this.handleErrorGetSigningKeys));\r\n        } else {\r\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.get<JwtKeys>('undefined').pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        this.loggerService.logError(errMsg);\r\n        return throwError(errMsg);\r\n    }\r\n\r\n    private runTokenValidation() {\r\n        if (this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n        this.loggerService.logDebug('runTokenValidation silent-renew running');\r\n\r\n        /**\r\n         *   First time: delay 10 seconds to call silentRenewHeartBeatCheck\r\n         *   Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\r\n         */\r\n        const silentRenewHeartBeatCheck = () => {\r\n            this.loggerService.logDebug(\r\n                'silentRenewHeartBeatCheck\\r\\n' +\r\n                    `\\tsilentRenewRunning: ${this.oidcSecurityCommon.silentRenewRunning === 'running'}\\r\\n` +\r\n                    `\\tidToken: ${!!this.getIdToken()}\\r\\n` +\r\n                    `\\t_userData.value: ${!!this._userData.value}`\r\n            );\r\n            if (this._userData.value && this.oidcSecurityCommon.silentRenewRunning !== 'running' && this.getIdToken()) {\r\n                if (\r\n                    this.oidcSecurityValidation.isTokenExpired(\r\n                        this.oidcSecurityCommon.idToken,\r\n                        this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\r\n                    )\r\n                ) {\r\n                    this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\r\n\r\n                    if (this.configurationProvider.openIDConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(\r\n                            () => {\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            },\r\n                            (err: any) => {\r\n                                this.loggerService.logError('Error: ' + err);\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            }\r\n                        );\r\n                        /* In this situation, we schedule a heartbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            const urlParts = e.detail.toString().split('?');\r\n            const params = new HttpParams({\r\n                fromString: urlParts[1],\r\n            });\r\n            const code = params.get('code');\r\n            const state = params.get('state');\r\n            const session_state = params.get('session_state');\r\n            const error = params.get('error');\r\n            if (code && state) {\r\n                this.requestTokensWithCodeProcedure(code, state, session_state);\r\n            }\r\n            if (error) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired));\r\n                this.resetAuthorizationData(false);\r\n                this.oidcSecurityCommon.authNonce = '';\r\n                this.loggerService.logDebug(e.detail.toString());\r\n            }\r\n        } else {\r\n            // ImplicitFlow\r\n            this.authorizedImplicitFlowCallback(e.detail);\r\n        }\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { IFrameService } from '../services/existing-iframe.service';\r\nimport { EqualityHelperService } from '../services/oidc-equality-helper.service';\r\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\r\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\r\nimport { LoggerService } from '../services/oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\r\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\r\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { OidcSecurityService } from '../services/oidc.security.service';\r\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\r\nimport { BrowserStorage, OidcSecurityStorage } from '../services/oidc.security.storage';\r\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\r\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\r\n\r\n@NgModule()\r\nexport class AuthModule {\r\n    static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: AuthModule,\r\n            providers: [\r\n                OidcConfigService,\r\n                OidcSecurityService,\r\n                OidcSecurityValidation,\r\n                OidcSecurityCheckSession,\r\n                OidcSecuritySilentRenew,\r\n                OidcSecurityUserService,\r\n                OidcSecurityCommon,\r\n                TokenHelperService,\r\n                LoggerService,\r\n                IFrameService,\r\n                EqualityHelperService,\r\n                OidcDataService,\r\n                StateValidationService,\r\n                {\r\n                    provide: OidcSecurityStorage,\r\n                    useClass: token.storage || BrowserStorage,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n}\r\n\r\nexport interface Type<T> extends Function {\r\n    new (...args: any[]): T;\r\n}\r\n\r\nexport interface Token {\r\n    storage?: Type<any>;\r\n}\r\n"]}